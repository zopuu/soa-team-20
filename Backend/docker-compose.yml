version: "3.9"

services:
    auth:
        build:
            context: ./services/auth/AuthService
            dockerfile: Dockerfile
        container_name: "authService"
        image: authservice:latest
        ports:
            - "7001:8080"
        environment:
            ASPNETCORE_ENVIRONMENT: Development
            ConnectionStrings__DefaultConnection: "Host=auth-db;Port=5432;Database=auth;Username=postgres;Password=password"
        depends_on:
            - auth-db
        networks:
            - backend

    auth-db:
        image: postgres:15
        container_name: "authDatabase"
        environment:
            POSTGRES_DB: auth
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: 123
        ports:
            - "55432:5432"
        volumes:
            - auth_data:/var/lib/postgresql/data
        networks:
            - backend

    # Go stakeholders service (no new DB)
    stakeholders:
        build:
            context: ./services/stakeholders
            dockerfile: Dockerfile
        image: stakeholders:latest
        container_name: "stakeholdersService"
        ports:
            - "5001:8080" # host 5001 -> container 8080
        environment:
            USER_DB_HOST: auth-db
            USER_DB_USER: postgres
            USER_DB_PASS: password
            USER_DB_NAME: auth
            USER_DB_PORT: "5432"
            USER_SERVICE_PORT:
                "8080"
                # JWT verification
            Jwt__Key: "aiugbherajndfuieajdvnaiuerkjdfnaeui" # must match Auth
            Jwt__Issuer: "AuthService"
            Jwt__Audience: "AuthServiceClient"
        depends_on:
            - auth
            - auth-db
        networks:
            - backend

    blogservice:
        build:
            context: .
            dockerfile: services/blog/Dockerfile
        container_name: blogservice
        image: blogservice
        ports:
            - "5100:8080"
        environment:
            - MONGO_URI=mongodb://blogmongodb:27017
            - SERVICE_NAME=blogservice
            - LOG_LEVEL=info
        depends_on:
            - blogmongodb
        networks:
            - backend

    blogmongodb:
        image: mongo:6
        container_name: blogmongodb
        restart: always
        ports:
            - "27017:27017"
        volumes:
            - blog-data:/data/db
        networks:
            - backend

    tourservice:
        build:
            context: .
            dockerfile: services/tour/Dockerfile
        container_name: tourservice
        image: tourservice
        ports:
            - "5200:8080"
            - "50052:50052"
        environment:
            - MONGO_URI=mongodb://tourmongodb:27017
        depends_on:
            - tourmongodb
        networks:
            - backend

    tourmongodb:
        image: mongo:6
        container_name: tourmongodb
        restart: always
        ports:
            - "27018:27017"
        volumes:
            - tour-data:/data/db
        networks:
            - backend

    followers-service:
        build:
            context: .
            dockerfile: services/followers_service/Dockerfile
        container_name: followers-service
        ports:
            - "50051:50051"
        environment:
            - NEO4J_URI=bolt://followers-db:7687
            - NEO4J_USER=neo4j
            - NEO4J_PASSWORD=followersPass # match the one in followers_neo4j
        depends_on:
            - followers-db
        networks:
            - backend

    followers-db:
        image: neo4j:5
        container_name: followers-db
        ports:
            - "7475:7474"
            - "7688:7687"
        environment:
            - NEO4J_AUTH=neo4j/followersPass
        volumes:
            - followers_neo4j_data:/data
        networks:
            - backend

    shopping-mongo:
        image: mongo:6
        container_name: shopping-mongo
        ports:
            - "27019:27017"   # host port optional
        volumes:
            - shopping-data:/data/db
        networks:
            - backend

    shopping-service:
        build:
            context: ./services/shopping_service
            dockerfile: Dockerfile
        container_name: shopping-service
        ports:
            - "50053:50053"
        environment:
            - MONGO_URI=mongodb://shopping-mongo:27017
            - MONGO_DB=shoppingdb
            - GRPC_ADDR=:50053
        depends_on:
            - shopping-mongo
        networks:
            - backend




    gateway:
        build:
            context: .
            dockerfile: gateway/Dockerfile # must exist in Backend/gateway
        container_name: gateway
        ports:
            - "7000:7000" # expose API Gateway on localhost:7000
        environment:
            - GATEWAY_PORT=7000
            - AUTH_BASE=http://auth:8080 # match service name + container port
            - STAKE_BASE=http://stakeholders:8080
            - BLOG_BASE=http://blogservice:8080
            - TOUR_BASE=http://tourservice:8080
            - FOLLOWERS_GRPC_ADDR=followers-service:50051
            - TOUR_GRPC_ADDR=tourservice:50052
            - SHOPPING_GRPC_ADDR=shopping_service:50053
            - JWT_SECRET=aiugbherajndfuieajdvnaiuerkjdfnaeui
            - JWT_ISSUER=AuthService
            - JWT_AUDIENCE=AuthServiceClient
            - CORS_ORIGINS=http://localhost:4200
        depends_on:
            - auth
            - stakeholders
            - blogservice
            - tourservice
            - followers-service
            - shopping-service
        networks:
            - backend
    loki:
        image: grafana/loki:2.9.3
        container_name: loki
        command: -config.file=/etc/loki/config.yml
        ports:
        - "3100:3100"
        volumes:
        - ./observability/loki-config.yml:/etc/loki/config.yml:ro
        - loki_data:/loki
        networks:
        - backend


    promtail:
        image: grafana/promtail:2.9.3
        container_name: promtail
        command: -config.file=/etc/promtail/config.yml
        depends_on:
        - loki
        volumes:
        - ./observability/promtail-config.yml:/etc/promtail/config.yml:ro
        - promtail_positions:/positions
        - /var/lib/docker/containers:/var/lib/docker/containers:ro
        - /var/run/docker.sock:/var/run/docker.sock:ro
        networks:
        - backend

    grafana:
        image: grafana/grafana:10.4.2
        container_name: grafana
        ports:
        - "3000:3000"
        environment:
        - GF_SECURITY_ADMIN_USER=admin
        - GF_SECURITY_ADMIN_PASSWORD=admin
        volumes:
        - grafana_data:/var/lib/grafana
        - ./observability/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
        depends_on:
        - loki
        networks:
        - backend
    tempo:
        image: grafana/tempo:2.6.0
        command: ["-config.file=/etc/tempo.yaml"]
        volumes:
        - ./observability/tempo.yaml:/etc/tempo.yaml:ro
        ports: ["3200:3200"] # Tempo HTTP API
        networks:
            - backend
    otel-collector:
        image: otel/opentelemetry-collector:0.101.0
        command: ["--config=/etc/otelcol/config.yaml"]
        volumes:
        - ./observability/otelcol-config.yaml:/etc/otelcol/config.yaml:ro
        ports: ["4317:4317","4318:4318"]   # OTLP gRPC/HTTP
        depends_on: [tempo]
        networks:
            - backend

volumes:
    auth_data:
    blog-data:
    tour-data:
    followers_neo4j_data:
    loki_data:
    promtail_positions:
    grafana_data:
    shopping-data:

networks:
    backend:
        driver: bridge
